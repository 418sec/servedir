#!/usr/local/bin/node

/*!
 * servedir HTTP Server
 * http://github.com/rem/servedir
 *
 * Copyright 2011, Remy Sharp
 * http://remysharp.com
*/

// Convenience aliases.
var http = require('http'), path = require('path'), fs = require('fs'),
url = require('url'),

// Common MIME types.
mimeTypes = {
  'aif': 'audio/x-aiff',
  'aiff': 'audio/x-aiff',
  'atom': 'application/atom+xml',
  'bmp': 'image/bmp',
  'css': 'text/css',
  'gif': 'image/gif',
  'htm': 'text/html',
  'html': 'text/html',
  'ico': 'image/x-icon',
  'ics': 'text/calendar',
  'jpe': 'image/jpeg',
  'jpeg': 'image/jpeg',
  'jpg': 'image/jpeg',
  'js': 'text/javascript',
  'json': 'application/json',
  'jsonp': 'text/javascript',
  'mathml': 'application/mathml+xml',
  'mid': 'audio/midi',
  'midi': 'audio/midi',
  'mov': 'video/quicktime',
  'mp3': 'audio/mpeg',
  'mpeg': 'video/mpeg',
  'mpg': 'video/mpeg',
  'ogg': 'application/ogg',
  'pdf': 'application/pdf',
  'png': 'image/png',
  'rb': 'text/plain',
  'rtf': 'application/rtf',
  'sh': 'application/x-sh',
  'svg': 'image/svg+xml',
  'swf': 'application/x-shockwave-flash',
  'tar': 'application/x-tar',
  'tif': 'image/tiff',
  'tiff': 'image/tiff',
  'txt': 'text/plain',
  'wav': 'audio/x-wav',
  'xht': 'application/xhtml+xml',
  'xhtml': 'application/xhtml+xml',
  'xml': 'text/xml',
  'xsl': 'application/xml',
  'xslt': 'application/xslt+xml',
  'zip': 'application/zip'
},

// Configure the root directory, port, and default MIME type.
root = process.argv[2], port = process.argv[3], defaultMime = 'text/plain';

// Use port 8000 if the port was omitted.
if (!port) {
  port = 8000;
}

// Use the current directory if the root directory was omitted.
if (!root || (root = Math.ceil(root)) > -1) {
  // Port number specified.
  port = root || port;
  root = process.cwd();
}

// Create a new simple HTTP server.
http.createServer(function(req, res) {
  // Resolve the path to the requested file or folder.
  var pathname = url.parse(req.url).pathname, file = path.join(root, pathname);
  path.exists(file, function(exists) {
    var stat;
    if (exists) {
      // Serve files and directories.
      stat = fs.statSync(file);
      if (stat.isFile()) {
        // Read and serve files.
        fs.readFile(file, 'binary', function(err, file) {
          if (err) {
            // Internal server error; avoid throwing an exception.
            res.writeHeader(500, {'Content-type': 'text/plain'});
            res.write(err + '\n');
          } else {
            // Set the correct MIME type using the extension.
            res.writeHead(200, {'Content-Type': mimeTypes[file.slice(
              // Unrecognized extension; use the default MIME type.
              file.lastIndexOf('.') + 1)] || defaultMime});
            res.write(file, 'binary');
          }
          // Close the connection.
          res.end();
        });
      } else {
        // Serve directories.
        if (pathname.slice(-1) !== '/') {
          // Automatically append a trailing slash for directories.
          pathname += '/';
        }
        res.writeHead(200, {'Content-type': 'text/html'});
        res.write('<ul>\n');
        fs.readdirSync(file).forEach(function(name) {
          res.write('<li><a href="' + pathname + name + '">' + name +
            '</a></li>\n');
        });
        res.write('</ul>\n');
        res.end();
      }
    } else {
      res.writeHead(200, {'Content-type': 'text/plain'});
      res.end('File not found');
    }
  });
}).listen(port);

console.log('Serving ' + root + ' on port ' + port);